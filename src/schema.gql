# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Query {
  currentUser: User!
  findDoctorsByClinicId(first: Int!, after: String, clinicId: ID!): ClinicDoctorConnection
  findClinicById(id: ID!): Clinic
  clinics(first: Int!, after: String): ClinicConnection
}

type User {
  id: ID!
  name: String
  email: String!
  phoneNumber: String
  clinic: Clinic
  role: Role!
}

type Clinic {
  id: ID!
  name: String!
  doctors(first: Int!, after: String): ClinicDoctorConnection
  eggSharers(first: Int!, after: String): ClinicEggSharerConnection
  eggRecipients(first: Int!, after: String): ClinicEggRecipientConnection
  patientAttributes(first: Int!, after: String): ClinicPatientAttributeConnection
}

type ClinicDoctorConnection {
  pageInfo: PageInfo!
  edges: [ClinicDoctorEdge!]
  nodes: [Doctor!]
}

type PageInfo {
  startCursor: String
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

type ClinicDoctorEdge {
  cursor: String!
  node: Doctor!
}

type Doctor {
  id: ID!
  name: String
  email: String!
  phoneNumber: String
  clinic: Clinic!
  role: Role!
}

type Role {
  id: ID!
  code: String!
  displayName: String!
}

type ClinicEggSharerConnection {
  pageInfo: PageInfo!
  edges: [ClinicEggSharerEdge!]
}

type ClinicEggSharerEdge {
  cursor: String!
  node: EggSharer!
}

type EggSharer {
  id: ID!
  name: String
  clinic: Clinic!
}

type ClinicEggRecipientConnection {
  pageInfo: PageInfo!
  edges: [ClinicEggRecipientEdge!]
}

type ClinicEggRecipientEdge {
  cursor: String!
  node: EggRecipient!
}

type EggRecipient {
  id: ID!
  name: String
  clinic: Clinic!
}

type ClinicPatientAttributeConnection {
  pageInfo: PageInfo!
  edges: [ClinicPatientAttributeEdge!]
}

type ClinicPatientAttributeEdge {
  cursor: String!
  node: PatientAttribute!
}

type PatientAttribute {
  id: ID!
  name: String!
  clinic: Clinic!
  inputType: InputType!
  values(first: Int!, after: String): PatientAttributePatientAttributeValueConnection
}

type InputType {
  id: ID!
  code: String!
  displayName: String!
}

type PatientAttributePatientAttributeValueConnection {
  pageInfo: PageInfo!
  edges: [PatientAttributePatientAttributeValueEdge!]
}

type PatientAttributePatientAttributeValueEdge {
  cursor: String!
  node: PatientAttributeValue!
}

type PatientAttributeValue {
  id: ID!
  value: String!
  patientAttribute: PatientAttribute!
}

type ClinicConnection {
  pageInfo: PageInfo!
  edges: [ClinicEdge!]
  nodes: [Clinic!]
}

type ClinicEdge {
  cursor: String!
  node: Clinic!
}

type Mutation {
  changePassword(input: ChangePasswordInput!): ChangePasswordPayload
  createDoctor(input: CreateDoctorInput!): CreateDoctorPayload
}

type ChangePasswordPayload {
  errors: [ChangePasswordError!]
}

type ChangePasswordError {
  message: String

  # The path to the field that had the error
  field: [String!]
  code: ChangePasswordErrorCode!
}

enum ChangePasswordErrorCode {
  USER_NOT_FOUND
  UNKNOWN
}

input ChangePasswordInput {
  userId: ID!
  password: String!
}

type CreateDoctorPayload {
  data: Doctor
  errors: [CreateDoctorError!]
}

type CreateDoctorError {
  message: String

  # The path to the field that had the error
  field: [String!]
  code: CreateDoctorErrorCode!
}

enum CreateDoctorErrorCode {
  EMAIL_TAKEN
  CLINIC_NOT_FOUND
  INVALID_REQUEST
  UNKNOWN
}

input CreateDoctorInput {
  clinicId: ID!
  name: String!
  email: String!
  password: String!
  phoneNumber: String
}
